# -*- coding: utf-8 -*-
"""succccc_api_chat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QyrrzSklEk7A8T1I7PG0alHK2WkQWWFA
"""









!pip install google-generativeai

import google.generativeai as genai
import os

def initialize_gemini(api_key):
    """تهيئة نموذج Gemini باستخدام مفتاح API"""
    genai.configure(api_key=api_key)
    return genai.GenerativeModel('gemini-1.5-flash')lk
def generate_text(model, prompt, temperature=0.7, max_tokens=500):
    """إنشاء نص بناء على المُدخل"""
    config = {
        'temperature': temperature,
        'max_output_tokens': max_tokens
    }
    response = model.generate_content(prompt, generation_config=config)
    return response.text

def main():
    # الحصول على مفتاح API من المتغيرات البيئية
    api_key = os.getenv('GEMINI_API_KEY') or input("أدخل مفتاح API الخاص بك: ")

    # تهيئة النموذج
    model = initialize_gemini(api_key)

    while True:
        # الحصول على المدخلات من المستخدم
        prompt = input("\nأدخل النص الأولي (أو 'exit' للخروج): ")

        if prompt.lower() == 'exit':
            break

        # توليد النص
        try:
            generated_text = generate_text(model, prompt)
            print("\nالنص المُنشأ:")
            print(generated_text)
        except Exception as e:
            print(f"حدث خطأ: {str(e)}")

if __name__ == "__main__":
    main()

import google.generativeai as genai

def initialize_gemini(api_key):
    """Configure a Gemini model using an API key"""
    genai.configure(api_key=api_key)
    return genai.GenerativeModel('gemini-1.5-flash')  # تأكد من صحة اسم النموذج

def generate_text(model, prompt, temperature=0.7, max_tokens=500):
    "Create text based on input"
    config = {
        'temperature': temperature,
        'max_output_tokens': max_tokens
    }
    response = model.generate_content(prompt, generation_config=config)
    return response.text

def main():
    #  تحذير أمني: لا تخزن المفاتيح بشكل ثابت في الكود!
    api_key = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"  # مفتاحك هنا

    # تهيئة النموذج
    model = initialize_gemini(api_key)

    while True:
        prompt = input("\nEnter initial text (or 'exit' to exit): ")

        if prompt.lower() == 'exit':
            break

        try:
            generated_text = generate_text(model, prompt)
            print("\nGenerated text:")
            print(generated_text)
        except Exception as e:
            print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()